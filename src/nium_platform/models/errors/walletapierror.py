"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from nium_platform import utils
from typing import List, Optional

class Status(str, Enum):
    r"""HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR."""
    TWO_HUNDRED_OK = '200 OK'
    FOUR_HUNDRED_BAD_REQUEST = '400 BAD_REQUEST'
    FOUR_HUNDRED_AND_THREE_FORBIDDEN = '403 FORBIDDEN'
    FOUR_HUNDRED_AND_FOUR_NOT_FOUND = '404 NOT_FOUND'
    FIVE_HUNDRED_INTERNAL_SERVER_ERROR = '500 INTERNAL_SERVER_ERROR'
    FIVE_HUNDRED_AND_TWO_BAD_GATEWAY = '502 BAD_GATEWAY'
    FIVE_HUNDRED_AND_THREE_SERVICE_UNAVAILABLE = '503 SERVICE_UNAVAILABLE'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class WalletAPIError(Exception):
    errors: Optional[List[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""List of errors occurred."""
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""Error message descriptor."""
    status: Optional[Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""HttpStatus of the request : BAD_REQUEST, INTERNAL_SERVER_ERROR."""
    

    def __str__(self) -> str:
        return utils.marshal_json(self, type(self))
