"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conversionschedule as shared_conversionschedule
from ..shared import lockperiod as shared_lockperiod
from ..shared import quotetype as shared_quotetype
from dataclasses_json import Undefined, dataclass_json
from nium_platform import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuoteCreationRequestWithDestinationAmount:
    destination_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount."""
    quote_type: shared_quotetype.QuoteType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoteType') }})
    r"""The type of the quote.
      * `balance_transfer`: Quote for transferring the balance from one currency to another within the same customer wallet.
      * `payout`: Quote for transferring money to a registered beneficiary's wallet in another currency.
    """
    source_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount."""
    conversion_schedule: Optional[shared_conversionschedule.ConversionSchedule] = dataclasses.field(default=shared_conversionschedule.ConversionSchedule.IMMEDIATE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionSchedule'), 'exclude': lambda f: f is None }})
    r"""The time period after which the conversion should be settled."""
    destination_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationAmount'), 'exclude': lambda f: f is None }})
    r"""The amount needed in the destination currency. This value is for reference only and will not be used as the actual conversion amount."""
    lock_period: Optional[shared_lockperiod.LockPeriod] = dataclasses.field(default=shared_lockperiod.LockPeriod.FIVE_MINS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockPeriod'), 'exclude': lambda f: f is None }})
    r"""The duration for which the quote remains valid after creation."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuoteCreationRequestWithSourceAmount:
    destination_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount."""
    quote_type: shared_quotetype.QuoteType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoteType') }})
    r"""The type of the quote.
      * `balance_transfer`: Quote for transferring the balance from one currency to another within the same customer wallet.
      * `payout`: Quote for transferring money to a registered beneficiary's wallet in another currency.
    """
    source_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount."""
    conversion_schedule: Optional[shared_conversionschedule.ConversionSchedule] = dataclasses.field(default=shared_conversionschedule.ConversionSchedule.IMMEDIATE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionSchedule'), 'exclude': lambda f: f is None }})
    r"""The time period after which the conversion should be settled."""
    lock_period: Optional[shared_lockperiod.LockPeriod] = dataclasses.field(default=shared_lockperiod.LockPeriod.FIVE_MINS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockPeriod'), 'exclude': lambda f: f is None }})
    r"""The duration for which the quote remains valid after creation."""
    source_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAmount'), 'exclude': lambda f: f is None }})
    r"""The source amount to be converted to the destination currency. This value is for reference only and will not be used as the actual conversion amount."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuoteCreationRequestWithNoAmount:
    destination_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount."""
    quote_type: shared_quotetype.QuoteType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoteType') }})
    r"""The type of the quote.
      * `balance_transfer`: Quote for transferring the balance from one currency to another within the same customer wallet.
      * `payout`: Quote for transferring money to a registered beneficiary's wallet in another currency.
    """
    source_currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCurrencyCode') }})
    r"""3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount."""
    conversion_schedule: Optional[shared_conversionschedule.ConversionSchedule] = dataclasses.field(default=shared_conversionschedule.ConversionSchedule.IMMEDIATE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conversionSchedule'), 'exclude': lambda f: f is None }})
    r"""The time period after which the conversion should be settled."""
    lock_period: Optional[shared_lockperiod.LockPeriod] = dataclasses.field(default=shared_lockperiod.LockPeriod.FIVE_MINS, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockPeriod'), 'exclude': lambda f: f is None }})
    r"""The duration for which the quote remains valid after creation."""
    



@dataclasses.dataclass
class QuoteCreationRequest:
    pass
